<launch>

  <!-- Gazebo arguments -->
  <arg name="paused" default="false" doc="Start Gazebo paused"/>
  <arg name="use_sim_time" default="true" doc="Use simulation time"/>
  <arg name="gui" default="true" doc="Start Gazebo GUI"/>
  <arg name="headless" default="false" doc="Start Gazebo headless (no GUI)"/>
  <arg name="debug" default="false" doc="Start Gazebo in debug mode"/>
  <arg name="verbose" default="false" doc="Start Gazebo in verbose mode (set false if too noisy)"/>
  <arg name="world_name" default="worlds/empty.world" doc="World file to load"/>

  <!-- Robot configuration -->
  <arg name="x_init_pose" default="0"/>
  <arg name="y_init_pose" default="0.0"/>
  <arg name="z_init_pose" default="0.0"/>
  <arg name="yaw_init_pose" default="0"/>

  <!-- Launch Gazebo -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="verbose" value="$(arg verbose)"/>
    <arg name="world_name" value="$(arg world_name)"/>
  </include>

  <!-- Load Robot Description -->
  <param name="robot_description"
         command="$(find xacro)/xacro '$(find mpc_description)/urdf/mpc_robot.xacro'" />

  <!-- Load Controller Configuration -->
  <rosparam file="$(find mpc_description)/config/ur20_controllers.yaml" command="load"/>

  <!-- Spawn Robot in Gazebo -->
  <!-- Added initial joint positions (-J) similar to reference spawn_robot.launch -->
  <!-- These are arbitrary 'upright' poses, adjust as needed -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-x $(arg x_init_pose) 
              -y $(arg y_init_pose) 
              -z $(arg z_init_pose) 
              -Y $(arg yaw_init_pose) 
              -param robot_description -urdf -model mpc
              -J shoulder_pan_joint 1.5708
              -J shoulder_lift_joint -1.0472
              -J elbow_joint -2.0943
              -J wrist_1_joint 0.0
              -J wrist_2_joint 1.5708
              -J wrist_3_joint 0.0
              -unpause"/>

  <!-- Spawn Controllers -->
  <!-- Launch spawner in the root namespace to find /controller_manager services -->
  <!-- Provide fully namespaced controller names in args -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="/arm/scaled_pos_traj_controller joint_state_controller platform_prismatic_joint_velocity_controller"/>

  <!-- Start Robot State Publisher -->
  <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="use_tf_static" type="bool" value="true"/>
  </node> -->

  <!-- Start Joint State Publisher GUI (optional, can be removed) -->
  <!-- Sometimes helpful for debugging initial setup -->
  <!-- <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" /> -->

   <!-- Start Joint State Publisher (Aggregates joint states) -->
   <!-- Ensure gazebo_ros_control in your xacro publishes /joint_states -->
   <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" >
	  <rosparam param="source_list">["joint_states"]</rosparam>
      <!-- If using the explicit joint_state_controller spawner below, might need: -->
      <!-- <rosparam param="source_list">["joint_state_controller/joint_states"]</rosparam> -->
      <!-- <param name="rate" value="50"/> -->
  </node>

  <!-- Spawn Joint State Controller (Removed based on reference) -->
  <!-- If controllers STILL fail, uncommenting this might be necessary, -->
  <!-- but ensure it doesn't conflict with gazebo_ros_control plugin. -->
  <!-- <node name="joint_state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
        output="screen" args="joint_state_controller"/> -->


  <!-- Optional: Start RViz for visualization -->
  <!-- <arg name="rvizconfig" default="$(find mpc_description)/rviz/simulation_config.rviz"/> -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)" required="false" /> -->

</launch>
